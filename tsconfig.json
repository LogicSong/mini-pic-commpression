//配置文档 https://www.tslang.cn/docs/handbook/tsconfig-json.html
{
  "compilerOptions": {
    "strictNullChecks": true, //在严格的 null检查模式下， null和 undefined值不包含在任何类型里，只允许用它们自己和 any来赋值（有个例外， undefined可以赋值到 void）。
    "noImplicitAny": true, //在表达式和声明上有隐含的 any类型时报错。
    "module": "CommonJS", //指定生成哪个模块系统代码： "None"， "CommonJS"， "AMD"， "System"， "UMD"， "ES6"或 "ES2015"。
    "target": "ES5", //指定ECMAScript目标版本 "ES3"（默认）， "ES5"， "ES6"/ "ES2015"， "ES2016"， "ES2017"或 "ESNext"。
    "allowJs": false, //允许编译javascript文件。
    "experimentalDecorators": true, //启用实验性的ES装饰器。
    "noImplicitThis": true, //当 this表达式的值为 any类型的时候，生成一个错误。
    "noImplicitReturns": true, //不是函数的所有返回路径都有返回值时报错。（函数的所有情况下都确保要有返回值）
    "alwaysStrict": true, //以严格模式解析并为每个源文件生成 "use strict"语句
    "inlineSourceMap": true, //生成单个sourcemaps文件，而不是将每sourcemaps生成不同的文件。
    "inlineSources": true, //将代码与sourcemaps生成到一个文件中，要求同时设置了 --inlineSourceMap或 --sourceMap属性。
    "noFallthroughCasesInSwitch": true, //报告switch语句的fallthrough错误。（即，不允许switch的case语句贯穿）
    "noUnusedLocals": true, //若有未使用的局部变量则抛错。
    "noUnusedParameters": true, //若有未使用的参数则抛错。
    "strict": true, //启用所有严格类型检查选项。启用 --strict相当于启用 --noImplicitAny, --noImplicitThis, --alwaysStrict， --strictNullChecks和 --strictFunctionTypes和--strictPropertyInitialization。
    "removeComments": true, //删除所有注释，除了以 /!*开头的版权信息。
    "pretty": true, //给错误和消息设置样式，使用颜色和上下文。
    "strictPropertyInitialization": true, //确保类的非undefined属性已经在构造函数里初始化。若要令此选项生效，需要同时启用--strictNullChecks。
    "lib": ["es6"], //编译过程中需要引入的库文件的列表。
    "typeRoots": [
      //要包含的类型声明文件路径列表。默认所有可见的"@types"包会在编译过程中被包含进来。 node_modules/@types文件夹下以及它们子文件夹下的所有包都是可见的； 也就是说， ./node_modules/@types/，../node_modules/@types/和../../node_modules/@types/等等。如果指定了typeRoots，只有typeRoots下面的包才会被包含进来。
      "./typings" //这个配置文件会包含所有./typings下面的包，而不包含./node_modules/@types里面的包。
    ],
    //如果指定了types，只有被列出来的包才会被包含进来。 比如：
    //"types" : ["node", "lodash", "express"]//这个tsconfig.json文件将仅会包含 ./node_modules/@types/node，./node_modules/@types/lodash和./node_modules/@types/express。/@types/。 node_modules/@types/*里面的其它包不会被引入进来。
    //指定"types": []来禁用自动引入@types包。
    //注意，自动引入只在你使用了全局的声明（相反于模块）时是重要的。 如果你使用 import "foo"语句，TypeScript仍然会查找node_modules和node_modules/@types文件夹来获取foo包。
    //配置vant组件库，防止编译报错
    "paths": {
      "@vant/weapp/*": ["./node_modules/@vant/weapp/dist/*"]
    }
  },
  "include": ["./**/*.ts"],
  "exclude": ["node_modules"],
  "compileOnSave": true
}
